runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(heartData)
?setdiff
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rfFit$results
rfFit$bestTune
pred<-predict(rfFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
rfFit$finalModel$err.rate
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
pred<-predict(logFit, newdata=test_data)
pred
runApp()
logFit
logFit$finalModel
summary(logFit)
plot(varImp(rfFit))
str(heartData)
heartData<-heartData%>%select(-c(anaemia, smoking, diabetes, high_blood_pressure, sex))  #remove predictors that the article said were not important
runApp()
?varImp
runApp()
?renderPrint
runApp()
runApp()
runApp()
actionButton
?actionButton
runApp()
str(heartData)
runApp()
runApp()
str(heartData)
runApp()
?predict
runApp()
runApp()
runApp()
new_data <- data.frame(
age = 20,
creatinine_phosphokinase = 50,
platelets = 60,
serum_creatinine = 300,
serum_sodium=1000,
time=120
)
set.seed(101)
index <- createDataPartition(heartData$DEATH_EVENT, p = 0.8, list = FALSE)
# Split the data into 80% and 20% samples
modeling_data <- heartData[index, ]
test_data <- heartData[-index, ]
modeling_data$DEATH_EVENT<-factor(modeling_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
test_data$DEATH_EVENT<-factor(test_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
#Logistic regression
mycontrol<-trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
savePredictions = 'all',
classProbs = TRUE
)
logisticFormula<-as.formula("DEATH_EVENT~.")
#set seed for reproducibility
set.seed(101)
# Run the model.  Will use the out-of-bag samples to make predictions.
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = na.omit
)
prediction <- predict(logFit, newdata = new_data, type = "response")
prediction <- predict(logFit, newdata = new_data, type = "prob")
heartData<-heartData%>%select(-c(anaemia, smoking, diabetes, high_blood_pressure, sex))  #remove predictors that the article said were not important
set.seed(101)
index <- createDataPartition(heartData$DEATH_EVENT, p = 0.8, list = FALSE)
# Split the data into 80% and 20% samples
modeling_data <- heartData[index, ]
test_data <- heartData[-index, ]
modeling_data$DEATH_EVENT<-factor(modeling_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
test_data$DEATH_EVENT<-factor(test_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
#Logistic regression
mycontrol<-trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
savePredictions = 'all',
classProbs = TRUE
)
logisticFormula<-as.formula("DEATH_EVENT~.")
#set seed for reproducibility
set.seed(101)
# Run the model.  Will use the out-of-bag samples to make predictions.
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = na.omit
)
observed <- logFit$pred$obs     # Extract actual training data target values
train_predicted <- logFit$pred$pred      # Extract predicted training data target values
# Calculate accuracy of the training data using the confusion matrix
conf_matrix <- confusionMatrix(data = factor(train_predicted, levels = levels(train_predictions)),
reference = factor(observed, levels = levels(observed)))
# Extract accuracy from the confusion matrix
accuracy_training <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy of the training data:", accuracy_training))
new_data <- data.frame(
age = 20,
creatinine_phosphokinase = 50,
platelets = 60,
serum_creatinine = 300,
serum_sodium=1000,
time=120
)
prediction <- predict(logFit, newdata = new_data, type = "prob")
runApp()
new_data <- data.frame(
age = 20,
creatinine_phosphokinase = 50,
platelets = 60,
serum_creatinine = 300,
serum_sodium=1000,
time=120,
ejection_fraction=50
)
prediction <- predict(logFit, newdata = new_data, type = "prob")
prediction
runApp()
runApp()
runApp()
runApp()
prediction
runApp()
str(prediction$D)
runApp()
runApp()
runApp()
runApp()
install.packages("shinyWidgets")
runApp()
runApp()
?pickerInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?pivot_longer
library(tidyr)
?pivot_longer
data_long <- pivot_longer(heartData, cols = , names_to = "Predictor", values_to = "Value")
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
library(ggplot2)
library(tidyr)
# Reshape the data to long format
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
library(ggplot2)
library(tidyr)
# Reshape the data to long format
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
gplot(gather(data, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, group = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8), aes(fill = DEATH_EVENT)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2) +
guides(fill = FALSE)
ggplot(gather(data, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, group = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8), aes(fill = DEATH_EVENT)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2) +
guides(fill = FALSE)
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)+
guides(fill = FALSE)
heartData$DEATH_EVENT
str(heartData$DEATH_EVENT)
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT))) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT))) +
barplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
g<-ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT)))
g+bar(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
g<-ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT)))
g+geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
?barplot
g+barplot(height=Value)
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
ggplot(melt(heartData, id.vars = "DEATH_EVENT"), aes(x = value, fill = DEATH_EVENT)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
library(reshape2)
ggplot(melt(heartData, id.vars = "DEATH_EVENT"), aes(x = value, fill = DEATH_EVENT)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
library(reshape2)
ggplot(melt(heartData, id.vars = "DEATH_EVENT"), aes(x = value, fill = factor(DEATH_EVENT))) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
ggplot(melt(heartData, id.vars = "factor(DEATH_EVENT)"), aes(x = value, fill = factor(DEATH_EVENT))) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
ggplot(gather(heartData, key= Predictor, value=Value, -DEATH_EVENT), aes((x = Value)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2)
ggplot(gather(heartData, key= Predictor, value=Value, -DEATH_EVENT), aes((x = Value)) +
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = Value)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ Predictor, scales = "free", ncol = 2)
library(reshape2)
ggplot(melt(heartData, id.vars = "DEATH_EVENT"), aes(x = value, fill = factor(DEATH_EVENT))) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
library(shiny); runApp('C:/Users/singe/Downloads/original.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(heartData, aes(x = DEATH_EVENT, y = platelet)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightblue", width = 0.5) +
labs(title = "Bar Plot: Mean Platelet by Death Event",
x = "Death Event",
y = "Mean Platelet") +
theme_minimal()
str(heartData)
ggplot(heartData, aes(x = DEATH_EVENT, y = platelets)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightblue", width = 0.5) +
labs(title = "Bar Plot: Mean Platelets by Death Event",
x = "Death Event",
y = "Mean Platelets") +
theme_minimal()
plot_ly(heatData, x = ~platelets, y = ~DEATH_EVENT, z = ~DEATH_EVENT, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter Plot: Death Event vs. Platelets",
scene = list(xaxis = list(title = "Platelets"),
yaxis = list(title = "Death Event"),
zaxis = list(title = "Death Event")))
plot_ly(heartData, x = ~platelets, y = ~DEATH_EVENT, z = ~DEATH_EVENT, type = "scatter3d", mode = "markers") %>%
layout(title = "3D Scatter Plot: Death Event vs. Platelets",
scene = list(xaxis = list(title = "Platelets"),
yaxis = list(title = "Death Event"),
zaxis = list(title = "Death Event")))
ggplot(heartData, aes(x = DEATH_EVENT, y = platelet)) +
geom_jitter(width = 0.2, height = 0) +
labs(title = "Scatter Plot with Jitter: Death Event vs. Platelet",
x = "Death Event",
y = "Platelet")
gplot(heartData, aes(x = DEATH_EVENT, y = platelets)) +
geom_jitter(width = 0.2, height = 0) +
labs(title = "Scatter Plot with Jitter: Death Event vs. Platelets",
x = "Death Event",
y = "Platelets")
ggplot(heartData, aes(x = DEATH_EVENT, y = platelets)) +
geom_jitter(width = 0.2, height = 0) +
labs(title = "Scatter Plot with Jitter: Death Event vs. Platelets",
x = "Death Event",
y = "Platelets")
ggplot(heartData, aes(x = DEATH_EVENT, y = platelets)) +
geom_bar(stat = "summary", fun = "mean", fill = "lightblue", width = 0.5) +
labs(title = "Bar Plot: Mean Platelets by Death Event",
x = "Death Event",
y = "Mean Platelets") +
theme_minimal()
g<-ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT)))
g+geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
# Create a box plot with different colors for each level of DEATH_EVENT
ggplot(heartData, aes(x = DEATH_EVENT, y = platelets, fill = factor(DEATH_EVENT))) +
geom_boxplot() +
labs(title = "Box Plot: Platelets by Death Event",
x = "Death Event",
y = "Platelets") +
scale_fill_discrete(name = "Death Event")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(heartData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(heartData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?varImp
varImp(rfFit)
varImp(rfFit$finalModel)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(heartData)
runApp()
?numericInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(heartData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shiny::runGitHub
shiny::runApp()
shiny::runGitHub("https://github.com/jsingerfreeman/ST558project3/blob/main/app.R")
shiny::runGitHub("jsingerfreeman/ST558project3/blob/main/app.R")
shiny::runGitHub("jsingerfreeman/ST558project3")
shiny::runGitHub("jsingerfreeman/ST558project3", filetype=".R")
shiny::runGitHub("app.R", "jsingerfreeman")
shiny::runGitHub("ST558project3", "jsingerfreeman")
library(shiny)
# Replace the URL with the raw link to your 'app.R' file in the 'ST558project3' repository
shiny::runUrl("https://raw.githubusercontent.com/jsingerfreeman/ST558project3/main/app.R")
shiny::runUrl("https://github.com/jsingerfreeman/ST558project3/main/app.R")
shiny::runGitHub("ST558project3", "jsingerfreeman")
rm()
rm(list = ls())
shiny::runGitHub("ST558project3", "jsingerfreeman")
# List of packages to be installed
packages_to_install <- c("caret", "shiny", "ggplot2")
# List of packages to be installed
packages_to_install <- c("caret", "shiny", "ggplot2")
# Function to check and install packages if necessary
install_if_missing <- function(package_name) {
if (!requireNamespace(package_name, quietly = TRUE)) {
install.packages(package_name)
}
}
# Loop through the list and install missing packages
for (package in packages_to_install) {
install_if_missing(package)
}
# List of packages to be installed
packages_to_install <- c("caret", "shiny", "memer")
# List of packages to be installed
packages_to_install <- c("caret", "shiny", "memer")
# Function to check and install packages if necessary
install_if_missing <- function(package_name) {
if (!requireNamespace(package_name, quietly = TRUE)) {
install.packages(package_name)
}
}
# Loop through the list and install missing packages
for (package in packages_to_install) {
install_if_missing(package)
}
# List of packages to be installed
packages_to_install <- c("caret", "shiny", "butcher")
# Function to check and install packages if necessary
install_if_missing <- function(package_name) {
if (!requireNamespace(package_name, quietly = TRUE)) {
install.packages(package_name)
}
}
# Loop through the list and install missing packages
for (package in packages_to_install) {
install_if_missing(package)
}
library(butcher)
install.packages(c("shiny", "shinydashboard", "tidyverse", "knitr", "tidyr", "ggplot2", "caret", "DT", "shinyWidgets"))
packages<-c("shiny", "shinydashboard", "tidyverse","knitr","tidyr","ggplot2","caret","DT","shinyWidgets") # List of packages to be installed
install_if_missing <- function(package_name) {#Function to check and install packages if needed
if (!requireNamespace(package_name, quietly = TRUE)) {
install.packages(package_name)
}
}
for (package in packages) {# Loop through the list and install missing packages
install_if_missing(package)
}
packages<-c("shiny", "shinydashboard", "tidyverse","knitr","tidyr","ggplot2","brie","DT","shinyWidgets") # List of packages to be installed
install_if_missing <- function(package_name) {#Function to check and install packages if needed
if (!requireNamespace(package_name, quietly = TRUE)) {
install.packages(package_name)
}
}
for (package in packages) {# Loop through the list and install missing packages
install_if_missing(package)
}
rm(list=ls())
shiny::runGitHub("ST558project3", "jsingerfreeman")
