tuneGrid=data.frame(mtry=1:4))
rfFit$results
rfFit$bestTune
#Bagged trees
ntrees <- 200
btFit <- train(
form=logisticFormula,
data = modeling_data,
method = "treebag",  # Use "treebag" for bagging
trControl = mycontrol,
ntrees = ntrees
)
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = na.omit
)
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = pass
)
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = na.pass
)
mycontrol<-trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
savePredictions = 'all',
classProbs = TRUE,
metric="Accuracy")
mycontrol<-trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
savePredictions = 'all',
classProbs = TRUE
)
logisticFormula<-as.formula("DEATH_EVENT~.")
#set seed for reproducibility
set.seed(101)
# Run the model.  Will use the out-of-bag samples to make predictions.
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
metric="Accuracy",
family = "binomial",
na.action = na.omit
)
mycontrol<-trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
savePredictions = 'all',
classProbs = TRUE
)
logisticFormula<-as.formula("DEATH_EVENT~.")
#set seed for reproducibility
set.seed(101)
# Run the model.  Will use the out-of-bag samples to make predictions.
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = na.omit
)
?predict
pred<-predict(logFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
pred<-predict(rfFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
pred<-predict(btFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
varImp(rfFit)
rfFit
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
preProcess=c("center","scale"),
method = "glm",
family = "binomial",
na.action = na.omit
)
pred<-predict(logFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
train_predictions <- logFit$pred$obs     # Extract actual training data target values
train_predicted <- logFit$pred$pred      # Extract predicted training data target values
mse_training <- mean((train_predictions - train_predicted) ^ 2)  # Calculate MSE
train_predictions
train_predicted
# Step 4: Calculate accuracy of the training data using the confusion matrix
conf_matrix <- confusionMatrix(data = factor(train_predicted, levels = levels(train_predictions)),
reference = factor(train_predictions, levels = levels(train_predictions)))
# Extract accuracy from the confusion matrix
accuracy_training <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy of the training data:", accuracy_training))
observed <- logFit$pred$obs     # Extract actual training data target values
train_predicted <- logFit$pred$pred      # Extract predicted training data target values
# Calculate accuracy of the training data using the confusion matrix
conf_matrix <- confusionMatrix(data = factor(train_predicted, levels = levels(train_predictions)),
reference = factor(observed, levels = levels(observed)))
# Extract accuracy from the confusion matrix
accuracy_training <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy of the training data:", accuracy_training))
conf_matrix
runApp()
?tabBox
runApp()
?DT::renderDT
runApp()
?dataTableOutput
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?eventReactive
runApp()
runApp()
heartData
runApp()
runApp()
runApp()
runApp()
summary(lofFit)
summary(logFit)
runApp()
library(caret)
library(tidyverse)
# Create an index vector for stratified sampling
set.seed(101)
index <- createDataPartition(heartData$DEATH_EVENT, p = 0.8, list = FALSE)
# Split the data into 80% and 20% samples
modeling_data <- heartData[index, ]
test_data <- heartData[-index, ]
modeling_data$DEATH_EVENT<-factor(modeling_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
test_data$DEATH_EVENT<-factor(test_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
#Logistic regression
mycontrol<-trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
savePredictions = 'all',
classProbs = TRUE
)
logisticFormula<-as.formula("DEATH_EVENT~.")
#set seed for reproducibility
set.seed(101)
# Run the model.  Will use the out-of-bag samples to make predictions.
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = na.omit
)
observed <- logFit$pred$obs     # Extract actual training data target values
train_predicted <- logFit$pred$pred      # Extract predicted training data target values
# Calculate accuracy of the training data using the confusion matrix
conf_matrix <- confusionMatrix(data = factor(train_predicted, levels = levels(train_predictions)),
reference = factor(observed, levels = levels(observed)))
# Extract accuracy from the confusion matrix
accuracy_training <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy of the training data:", accuracy_training))
pred<-predict(logFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
#Random Forest
rfFormula <- logisticFormula
set.seed(102)
rfFit <- train(form=rfFormula,
data=modeling_data,
method="rf",
trControl=mycontrol,
tuneGrid=data.frame(mtry=1:4))
rfFit$results
rfFit$bestTune
pred<-predict(rfFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
varImp(rfFit)
#Bagged trees
ntrees <- 200
btFit <- train(
form=logisticFormula,
data = modeling_data,
method = "treebag",  # Use "treebag" for bagging
trControl = mycontrol,
ntrees = ntrees
)
pred<-predict(btFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
summary(logFit)
runApp()
varImp(rfFit)
plot(varImp(rfFit))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(heartData)
?setdiff
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rfFit$results
rfFit$bestTune
pred<-predict(rfFit, newdata=test_data)
postResample(pred, test_data$DEATH_EVENT)
rfFit$finalModel$err.rate
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
pred<-predict(logFit, newdata=test_data)
pred
runApp()
logFit
logFit$finalModel
summary(logFit)
plot(varImp(rfFit))
str(heartData)
heartData<-heartData%>%select(-c(anaemia, smoking, diabetes, high_blood_pressure, sex))  #remove predictors that the article said were not important
runApp()
?varImp
runApp()
?renderPrint
runApp()
runApp()
runApp()
actionButton
?actionButton
runApp()
str(heartData)
runApp()
runApp()
str(heartData)
runApp()
?predict
runApp()
runApp()
runApp()
new_data <- data.frame(
age = 20,
creatinine_phosphokinase = 50,
platelets = 60,
serum_creatinine = 300,
serum_sodium=1000,
time=120
)
set.seed(101)
index <- createDataPartition(heartData$DEATH_EVENT, p = 0.8, list = FALSE)
# Split the data into 80% and 20% samples
modeling_data <- heartData[index, ]
test_data <- heartData[-index, ]
modeling_data$DEATH_EVENT<-factor(modeling_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
test_data$DEATH_EVENT<-factor(test_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
#Logistic regression
mycontrol<-trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
savePredictions = 'all',
classProbs = TRUE
)
logisticFormula<-as.formula("DEATH_EVENT~.")
#set seed for reproducibility
set.seed(101)
# Run the model.  Will use the out-of-bag samples to make predictions.
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = na.omit
)
prediction <- predict(logFit, newdata = new_data, type = "response")
prediction <- predict(logFit, newdata = new_data, type = "prob")
heartData<-heartData%>%select(-c(anaemia, smoking, diabetes, high_blood_pressure, sex))  #remove predictors that the article said were not important
set.seed(101)
index <- createDataPartition(heartData$DEATH_EVENT, p = 0.8, list = FALSE)
# Split the data into 80% and 20% samples
modeling_data <- heartData[index, ]
test_data <- heartData[-index, ]
modeling_data$DEATH_EVENT<-factor(modeling_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
test_data$DEATH_EVENT<-factor(test_data$DEATH_EVENT, levels=c(0,1), labels=c("ND", "D"))
#Logistic regression
mycontrol<-trainControl(method = "cv",
number = 10,
summaryFunction = twoClassSummary,
savePredictions = 'all',
classProbs = TRUE
)
logisticFormula<-as.formula("DEATH_EVENT~.")
#set seed for reproducibility
set.seed(101)
# Run the model.  Will use the out-of-bag samples to make predictions.
logFit = train(
form = logisticFormula,
data = modeling_data,
trControl= mycontrol,
method = "glm",
family = "binomial",
na.action = na.omit
)
observed <- logFit$pred$obs     # Extract actual training data target values
train_predicted <- logFit$pred$pred      # Extract predicted training data target values
# Calculate accuracy of the training data using the confusion matrix
conf_matrix <- confusionMatrix(data = factor(train_predicted, levels = levels(train_predictions)),
reference = factor(observed, levels = levels(observed)))
# Extract accuracy from the confusion matrix
accuracy_training <- conf_matrix$overall["Accuracy"]
print(paste("Accuracy of the training data:", accuracy_training))
new_data <- data.frame(
age = 20,
creatinine_phosphokinase = 50,
platelets = 60,
serum_creatinine = 300,
serum_sodium=1000,
time=120
)
prediction <- predict(logFit, newdata = new_data, type = "prob")
runApp()
new_data <- data.frame(
age = 20,
creatinine_phosphokinase = 50,
platelets = 60,
serum_creatinine = 300,
serum_sodium=1000,
time=120,
ejection_fraction=50
)
prediction <- predict(logFit, newdata = new_data, type = "prob")
prediction
runApp()
runApp()
runApp()
runApp()
prediction
runApp()
str(prediction$D)
runApp()
runApp()
runApp()
runApp()
install.packages("shinyWidgets")
runApp()
runApp()
?pickerInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?pivot_longer
library(tidyr)
?pivot_longer
data_long <- pivot_longer(heartData, cols = , names_to = "Predictor", values_to = "Value")
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
library(ggplot2)
library(tidyr)
# Reshape the data to long format
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
library(ggplot2)
library(tidyr)
# Reshape the data to long format
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
gplot(gather(data, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, group = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8), aes(fill = DEATH_EVENT)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2) +
guides(fill = FALSE)
ggplot(gather(data, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, group = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8), aes(fill = DEATH_EVENT)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2) +
guides(fill = FALSE)
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = DEATH_EVENT, y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)+
guides(fill = FALSE)
heartData$DEATH_EVENT
str(heartData$DEATH_EVENT)
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = DEATH_EVENT)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT))) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT))) +
barplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
g<-ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT)))
g+bar(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
g<-ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = as.factor(DEATH_EVENT), y = Value, fill = as.factor(DEATH_EVENT)))
g+geom_boxplot(position = position_dodge(width = 0.8)) +
labs(x = 'DEATH_EVENT', y = "Value (Continuous)", title = "Boxplot of Predictors by DEATH_EVENT") +
facet_wrap(~ Predictor, scales = 'free', ncol = 2)
?barplot
g+barplot(height=Value)
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
ggplot(melt(heartData, id.vars = "DEATH_EVENT"), aes(x = value, fill = DEATH_EVENT)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
library(reshape2)
ggplot(melt(heartData, id.vars = "DEATH_EVENT"), aes(x = value, fill = DEATH_EVENT)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
library(reshape2)
ggplot(melt(heartData, id.vars = "DEATH_EVENT"), aes(x = value, fill = factor(DEATH_EVENT))) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
ggplot(melt(heartData, id.vars = "factor(DEATH_EVENT)"), aes(x = value, fill = factor(DEATH_EVENT))) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
ggplot(gather(heartData, key= Predictor, value=Value, -DEATH_EVENT), aes((x = Value)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2)
ggplot(gather(heartData, key= Predictor, value=Value, -DEATH_EVENT), aes((x = Value)) +
ggplot(gather(heartData, key = Predictor, value = Value, -DEATH_EVENT),
aes(x = Value)) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ Predictor, scales = "free", ncol = 2)
library(reshape2)
ggplot(melt(heartData, id.vars = "DEATH_EVENT"), aes(x = value, fill = factor(DEATH_EVENT))) +
geom_histogram(binwidth = 5, position = "identity", alpha = 0.7) +
labs(x = "Value (Continuous)", y = "Frequency", title = "Histograms of Predictors") +
facet_wrap(~ variable, scales = "free", ncol = 2) +
guides(fill = FALSE)
